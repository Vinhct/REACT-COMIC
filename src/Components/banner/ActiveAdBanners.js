import React, { useEffect, useState } from 'react';
import { supabase } from '../../supabaseClient';
import AdBanner from './AdBanner';

// Hi·ªÉn th·ªã t·∫•t c·∫£ banner qu·∫£ng c√°o active, ph√¢n theo v·ªã tr√≠
const ActiveAdBanners = ({ position = 'top', style = {} }) => {
  const [adOrders, setAdOrders] = useState([]);
  const [systemBanners, setSystemBanners] = useState([]);

  // Function ƒë·ªÉ c·∫≠p nh·∫≠t status c·ªßa c√°c ƒë∆°n h√†ng ƒë√£ h·∫øt h·∫°n
  const updateExpiredOrders = async () => {
    const now = new Date().toISOString();
    
    try {
      const { data: expiredOrders, error } = await supabase
        .from('ad_orders')
        .update({ status: 'expired' })
        .eq('status', 'active')
        .lt('end_time', now)
        .select();
        
      if (error) {
        console.error('Error updating expired orders:', error);
      } else if (expiredOrders && expiredOrders.length > 0) {
        console.log('Updated expired orders:', expiredOrders);
      }
    } catch (err) {
      console.error('Error in updateExpiredOrders:', err);
    }
  };

  useEffect(() => {
    const fetchActiveAds = async () => {
      const now = new Date();
      const nowISO = now.toISOString();
      console.log('üîç Checking ads at time:', nowISO);
      
      // Tr∆∞·ªõc ti√™n, c·∫≠p nh·∫≠t status c·ªßa c√°c ƒë∆°n h√†ng ƒë√£ h·∫øt h·∫°n
      await updateExpiredOrders();
      
      // L·∫•y T·∫§T C·∫¢ ƒë∆°n h√†ng active ƒë·ªÉ debug
      const { data: allActiveOrders, error } = await supabase
        .from('ad_orders')
        .select('*, ad_packages(*)')
        .eq('status', 'active')
        .order('created_at', { ascending: false });
      
      if (error) {
        console.error('‚ùå Error fetching ad orders:', error);
        return;
      }
      
      console.log('üì¶ All active orders from DB:', allActiveOrders);
      
      // Ki·ªÉm tra t·ª´ng ƒë∆°n h√†ng m·ªôt c√°ch chi ti·∫øt
      const validAds = [];
      const invalidAds = [];
      
      allActiveOrders?.forEach(order => {
        const startTime = order.start_time ? new Date(order.start_time) : null;
        const endTime = order.end_time ? new Date(order.end_time) : null;
        
        console.log(`\nüîç Checking order ${order.id}:`);
        console.log('  - Package:', order.ad_packages?.name);
        console.log('  - Position:', order.ad_packages?.position);
        console.log('  - Start time:', startTime ? startTime.toISOString() : 'NULL');
        console.log('  - End time:', endTime ? endTime.toISOString() : 'NULL');
        console.log('  - Current time:', nowISO);
        
        // Ki·ªÉm tra th·ªùi gian
        let isTimeValid = true;
        let timeReason = '';
        
        if (!startTime || !endTime) {
          isTimeValid = false;
          timeReason = 'Missing start_time or end_time';
        } else if (now < startTime) {
          isTimeValid = false;
          timeReason = 'Not started yet';
        } else if (now > endTime) {
          isTimeValid = false;
          timeReason = 'Already expired';
        } else {
          timeReason = 'Time is valid';
        }
        
        console.log(`  - Time check: ${isTimeValid ? '‚úÖ' : '‚ùå'} (${timeReason})`);
        
        if (isTimeValid) {
          validAds.push(order);
          console.log('  - ‚úÖ Added to valid ads');
        } else {
          invalidAds.push({ ...order, reason: timeReason });
          console.log('  - ‚ùå Rejected:', timeReason);
        }
      });
      
      console.log('\nüìä Summary:');
      console.log('  - Total active orders:', allActiveOrders?.length || 0);
      console.log('  - Valid ads:', validAds.length);
      console.log('  - Invalid ads:', invalidAds.length);
      
      if (invalidAds.length > 0) {
        console.log('\n‚ùå Invalid ads details:');
        invalidAds.forEach(ad => {
          console.log(`  - ${ad.id}: ${ad.reason}`);
        });
      }
      
      setAdOrders(validAds);
      
      // L·∫•y banner h·ªá th·ªëng
      const { data: sysData } = await supabase
        .from('system_banners')
        .select('*')
        .eq('active', true)
        .eq('position', position);
      setSystemBanners(sysData || []);
    };
    
    fetchActiveAds();
    
    // Refresh m·ªói 30 gi√¢y thay v√¨ 1 ph√∫t ƒë·ªÉ test nhanh h∆°n
    const interval = setInterval(fetchActiveAds, 30000);
    return () => clearInterval(interval);
  }, [position]);

  // ∆Øu ti√™n banner h·ªá th·ªëng
  if (systemBanners.length > 0) {
    console.log(`üéØ Showing ${systemBanners.length} system banners for position: ${position}`);
    return (
      <div style={style}>
        {systemBanners.map(banner => (
          <AdBanner
            key={banner.id}
            image={banner.image_url}
            link={banner.link}
            alt={banner.alt || 'Banner h·ªá th·ªëng'}
            style={{ marginBottom: 16 }}
          />
        ))}
      </div>
    );
  }

  // Sau ƒë√≥ ƒë·∫øn banner qu·∫£ng c√°o user
  const filtered = adOrders.filter(order => order.ad_packages?.position === position);
  
  console.log(`üéØ Filtered ads for position "${position}":`, filtered.length);
  console.log('üìã Filtered ads details:', filtered.map(ad => ({
    id: ad.id,
    package: ad.ad_packages?.name,
    position: ad.ad_packages?.position,
    banner_url: ad.banner_url
  })));
  
  if (filtered.length === 0) {
    console.log(`üì∫ Showing default banner for position: ${position}`);
    // Hi·ªÉn th·ªã banner m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ qu·∫£ng c√°o active
    return (
      <AdBanner
        image="/images/ad1.jpg"
        link="https://example.com"
        alt="Qu·∫£ng c√°o m·∫∑c ƒë·ªãnh"
        style={{ marginBottom: 16, ...style }}
      />
    );
  }

  console.log(`üéâ Showing ${filtered.length} user ads for position: ${position}`);
  return (
    <div style={style}>
      {filtered.map(order => (
        <AdBanner
          key={order.id}
          image={order.banner_url}
          link={order.link}
          alt={order.ad_packages?.name}
          style={{ marginBottom: 16 }}
        />
      ))}
    </div>
  );
};

export default ActiveAdBanners; 